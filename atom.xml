<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog.calouni.win</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.calouni.win/"/>
  <updated>2017-05-31T02:11:59.000Z</updated>
  <id>blog.calouni.win/</id>
  
  <author>
    <name>calouni</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac用dd命令录入iso镜像到u盘</title>
    <link href="blog.calouni.win/writeIso/"/>
    <id>blog.calouni.win/writeIso/</id>
    <published>2017-05-22T02:49:50.000Z</published>
    <updated>2017-05-31T02:11:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统的镜像 下载：This is <a href="http://www.itellyou.cn/" title="Title" target="_blank" rel="external">link</a> to download. </p>
<h3 id="如果是windows用ultraISO写入U盘（还没试过）"><a href="#如果是windows用ultraISO写入U盘（还没试过）" class="headerlink" title="如果是windows用ultraISO写入U盘（还没试过）"></a>如果是windows用ultraISO写入U盘（还没试过）</h3><h3 id="如果是mac可以用dd命令"><a href="#如果是mac可以用dd命令" class="headerlink" title="如果是mac可以用dd命令"></a>如果是mac可以用dd命令</h3><p><img src="/uploads/img/iso.jpg" alt="Alt text"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作系统的镜像 下载：This is &lt;a href=&quot;http://www.itellyou.cn/&quot; title=&quot;Title&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;link&lt;/a&gt; to download. &lt;/p&gt;
&lt;h3 id=&quot;如果是w
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="操作系统" scheme="blog.calouni.win/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>H5虚拟键盘的弹出和收起</title>
    <link href="blog.calouni.win/virtual_keyboard/"/>
    <id>blog.calouni.win/virtual_keyboard/</id>
    <published>2017-04-21T22:49:50.000Z</published>
    <updated>2017-05-20T02:59:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>移动端虚拟键盘的弹出和收起是监听不到事件的，移动端虚拟键盘出现的条件是：文本框（文本类）获得焦点。</p>
<p>1、导航栏和尾部为fixed时，弹出虚拟键盘时，导航栏的位置会出现偏移的情况<br>解决方法： 监听input的focus，聚焦则fixed改为static；定时器的存在是要把static状态改回fixed状态。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#dl_app img'</span>).hide();</div><div class="line">&#125;, <span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">  $(<span class="string">'body'</span>).append(<span class="string">'&lt;div&gt;'</span> + msg + <span class="string">'&lt;/div&gt;'</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.res = <span class="literal">null</span>;</div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixedWatch</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">  alert(i++);</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.activeElement.nodeName == <span class="string">'INPUT'</span>)&#123;</div><div class="line">    el.css(<span class="string">'position'</span>, <span class="string">'static'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    el.css(<span class="string">'position'</span>, <span class="string">'fixed'</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.res ) &#123; clearInterval(<span class="built_in">window</span>.res ); <span class="built_in">window</span>.res  = <span class="literal">null</span>; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$(<span class="string">'input'</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!<span class="built_in">window</span>.res) &#123;</div><div class="line">    fixedWatch($(<span class="string">'#headerview header'</span>));</div><div class="line">    <span class="built_in">window</span>.res = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      fixedWatch($(<span class="string">'#headerview header'</span>));</div><div class="line">    &#125;, <span class="number">500</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>2、当页面初始化时，要自动聚焦input，弹出虚拟键盘，这做不到。<br>网上提供的模拟用户点击之类都是无效的，先mark，有了好方法之后再补充。弹出的条件是必须要用户实际有操作。</p>
<p>h5页面做不到，但内嵌在app里面input只要写了focus事件就能聚焦调起虚拟键盘。如果是搜索框，虚拟键盘输入时右下角为换行键，如果点换行也是能提交input的搜索的，但是虚拟键盘不能自动缩回去。需要做的是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) &#123;</div><div class="line">        btnSearch.click(); <span class="comment">//触发搜索按钮的点击</span></div><div class="line">        iptSearch.blur(); <span class="comment">//input 失焦</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//可以阻止浏览器默认事件等</span></div><div class="line">      &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端虚拟键盘的弹出和收起是监听不到事件的，移动端虚拟键盘出现的条件是：文本框（文本类）获得焦点。&lt;/p&gt;
&lt;p&gt;1、导航栏和尾部为fixed时，弹出虚拟键盘时，导航栏的位置会出现偏移的情况&lt;br&gt;解决方法： 监听input的focus，聚焦则fixed改为static；定时器的存在是要把static状态改回fixed状态。&lt;/p&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="虚拟键盘" scheme="blog.calouni.win/tags/%E8%99%9A%E6%8B%9F%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>多图滑动兼容浏览器默认行为</title>
    <link href="blog.calouni.win/carousel/"/>
    <id>blog.calouni.win/carousel/</id>
    <published>2017-04-19T22:49:50.000Z</published>
    <updated>2017-05-20T03:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>页面元素结构如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"banner"</span>&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"banner-inner"</span>&gt;</span></span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"banner-item"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"switch banner-switch"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"switch-item cur"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"switch-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>一般浏览器表现良好，但是碰到qq，uc等含有左滑右滑都会前进后退行为的浏览器就会不太友好。 这明显是浏览器默认的行为，可以通过e.preventDefault(); 来禁止，经过调试，只需在touchmove的时候禁止就可以了。 刚开始禁止的是banner-inner这个div的touchmove，因为有关滑动的操作都是绑在这个元素上面。这样之后滑动touchmove的时候表现良好，但松手后，banner-inner进行transration时就还是会触发浏览器默认行为。 就在想无论是否在动画过程中，触发的不都是banner-inner这个元素的touchmove事件，而且已经禁止默认事件了，为什么还会有浏览器默认行为呢。 经过多次尝试与监听，发现动画过程中，用户触发的是banner-inner的父级，也就是banner元素的事件。 所以解决办法是添加了banner的touchmove事件监听，就是下面代码中加粗的那部分，禁止默认事件即可。<br>下面多图组件的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> $<span class="built_in">window</span> = $(<span class="built_in">window</span>);</div><div class="line">  <span class="keyword">var</span> defaultOpts = &#123;</div><div class="line">      <span class="attr">wrap</span>: <span class="string">'.banner-inner'</span>,</div><div class="line">      <span class="attr">item</span>: <span class="string">'.banner-item'</span>,</div><div class="line">      <span class="attr">indicator</span>: <span class="string">'.banner-switch'</span>,</div><div class="line">      <span class="attr">cur</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">duration</span>: <span class="number">0.5</span>,      <span class="comment">// 动画持续时间 单位s</span></div><div class="line">      delay: <span class="number">500</span>         <span class="comment">// 动画执行间隔 单位s</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> Carousel = <span class="function"><span class="keyword">function</span> (<span class="params">obj, opts</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.timer = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.init(obj, opts);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Carousel.prototype = &#123;</div><div class="line">    <span class="attr">play</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">      _this.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        _this.turnItem(<span class="number">1</span>);</div><div class="line">      &#125;, _this.opts.delay * <span class="number">1000</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">turnItem</span>: <span class="function"><span class="keyword">function</span>(<span class="params">step</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">      <span class="keyword">var</span> opts = _this.opts;</div><div class="line">      <span class="keyword">if</span>(!opts.isLock) &#123;</div><div class="line">        opts.pos += step;<span class="comment">//-1  step 0 pos -2</span></div><div class="line">        opts.cur = _this.resetVal(opts.cur + step);<span class="comment">//2</span></div><div class="line">        <span class="keyword">var</span> next = _this.resetVal(opts.cur + step);<span class="comment">//1 2</span></div><div class="line"></div><div class="line">        clearInterval(_this.timer);</div><div class="line">        _this.$item.eq(opts.cur).css(&#123;<span class="attr">left</span>: opts.pos * opts.itemW + <span class="string">'px'</span>&#125;);</div><div class="line">        _this.$item.eq(next).css(&#123;<span class="attr">left</span>: (opts.pos + step) * opts.itemW + <span class="string">'px'</span>&#125;);</div><div class="line">        _this.$wrap.css(&#123;<span class="attr">transition</span>: <span class="string">'transform '</span> + opts.duration + <span class="string">'s'</span>, <span class="attr">transform</span>: <span class="string">'translate3d('</span> + opts.pos * opts.itemW * <span class="number">-1</span> + <span class="string">'px,0,0)'</span>&#125;);</div><div class="line">        <span class="comment">//_this.$indicator.css(&#123;transition: 'transform ' + opts.duration / 2 + 's', transform: 'translate3d(' + opts.pos % opts.indicatorCount * 100 + '%,0,0)'&#125;);</span></div><div class="line">        <span class="keyword">if</span>(opts.indicatorCount&lt;<span class="number">3</span>)&#123;</div><div class="line">          step &amp;&amp; _this.$indicator.find(<span class="string">'.cur'</span>).removeClass(<span class="string">'cur'</span>).siblings().addClass(<span class="string">'cur'</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          _this.$indicator.find(<span class="string">'.switch-item'</span>).removeClass(<span class="string">'cur'</span>);</div><div class="line">          _this.$indicator.find(<span class="string">'.switch-item'</span>).eq(opts.cur).addClass(<span class="string">'cur'</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">resetVal</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> itemCount = <span class="keyword">this</span>.opts.itemCount;</div><div class="line">      <span class="keyword">if</span>(val &gt; itemCount - <span class="number">1</span>) &#123;</div><div class="line">        val = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(val &lt; <span class="number">0</span>) &#123;</div><div class="line">        val = itemCount - <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> val;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">touchEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">      <span class="comment">// $window.on('resize', _this.refresh(_this));</span></div><div class="line">      $<span class="built_in">window</span>.on(<span class="string">'resize'</span>, _this.refresh(_this));</div><div class="line"></div><div class="line">      <span class="keyword">var</span> sx = sy = ex = ey = <span class="number">0</span>;</div><div class="line"></div><div class="line">      _this.$wrap.on(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> touch = e.originalEvent.changedTouches[<span class="number">0</span>];</div><div class="line">                    sx = touch.pageX;</div><div class="line">                    sy = touch.pageY;</div><div class="line">                    clearInterval(_this.timer);</div><div class="line">                &#125;).on(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> touch = e.originalEvent.changedTouches[<span class="number">0</span>];</div><div class="line">                    <span class="keyword">var</span> x = touch.pageX;</div><div class="line">                    <span class="keyword">var</span> y = touch.pageY;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(x-sx) &gt; <span class="built_in">Math</span>.abs(y-sy) * <span class="number">2</span>) &#123;</div><div class="line">                      _this.$wrap.css(&#123;<span class="attr">transition</span>: <span class="string">'transform 0s'</span>, <span class="attr">transform</span>: <span class="string">'translate3d('</span> + (_this.opts.pos * _this.opts.itemW * <span class="number">-1</span> + (x - sx)) + <span class="string">'px,0,0)'</span>&#125;);</div><div class="line">                      e.preventDefault();</div><div class="line">                    &#125;</div><div class="line">                &#125;).on(<span class="string">'touchend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> touch = e.originalEvent.changedTouches[<span class="number">0</span>];</div><div class="line">                    ex = touch.pageX;</div><div class="line">                    ey = touch.pageY;</div><div class="line">                    <span class="keyword">var</span> x = ex - sx ;</div><div class="line">                    <span class="keyword">var</span> _x = <span class="built_in">Math</span>.abs(x);</div><div class="line">                    <span class="keyword">var</span> step = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">if</span>(_x &gt; <span class="built_in">Math</span>.abs(ey - sy) &amp;&amp; _x &gt; <span class="number">80</span>) &#123;</div><div class="line">                      step = x &gt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                    _this.turnItem(step);</div><div class="line">                    _this.play();</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">      _this.$box.on(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> touch = e.originalEvent.changedTouches[<span class="number">0</span>];</div><div class="line">        <span class="keyword">var</span> x = touch.pageX;</div><div class="line">        <span class="keyword">var</span> y = touch.pageY;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(x-sx) &gt; <span class="built_in">Math</span>.abs(y-sy) * <span class="number">2</span>) &#123;</div><div class="line">          e.preventDefault();       </div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">initView</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj, options</span>) </span>&#123;</div><div class="line">      <span class="comment">//test</span></div><div class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">      <span class="keyword">var</span> opts = $.extend(&#123;&#125;, defaultOpts, options);</div><div class="line"></div><div class="line">      opts.itemCount = <span class="number">0</span>;         <span class="comment">//  轮播item个数</span></div><div class="line">      opts.itemW = <span class="number">0</span>;             <span class="comment">//  轮播item宽度</span></div><div class="line">      opts.indicatorCount = <span class="number">0</span>;    <span class="comment">//  控制器item个数</span></div><div class="line">      opts.cur = <span class="number">0</span>;               <span class="comment">//  当前item显示位置</span></div><div class="line">      opts.pos = <span class="number">0</span>;               <span class="comment">//  当前容器显示位置</span></div><div class="line">      opts.isLock = <span class="literal">false</span>;        <span class="comment">//  lock</span></div><div class="line"></div><div class="line">      <span class="keyword">this</span>.$box = $(obj);</div><div class="line">      <span class="keyword">this</span>.$wrap = <span class="keyword">this</span>.$box.find(opts.wrap);</div><div class="line">      <span class="keyword">this</span>.$item = <span class="keyword">this</span>.$wrap.find(opts.item);</div><div class="line">      <span class="keyword">this</span>.$indicator = <span class="keyword">this</span>.$box.find(opts.indicator);</div><div class="line"></div><div class="line">      opts.itemCount = opts.indicatorCount = <span class="keyword">this</span>.$item.length;</div><div class="line">      opts.itemW = <span class="keyword">this</span>.$box.width();</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(opts.itemCount &lt; <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(opts.itemCount &lt; <span class="number">3</span>)&#123;</div><div class="line">        <span class="keyword">this</span>.$item.clone().appendTo(<span class="keyword">this</span>.$wrap);</div><div class="line">        <span class="keyword">this</span>.$item = <span class="keyword">this</span>.$wrap.find(opts.item);</div><div class="line">        opts.itemCount = <span class="keyword">this</span>.$item.length;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 初始化item位置</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; opts.itemCount - <span class="number">1</span> ; i++) &#123;</div><div class="line">        <span class="keyword">this</span>.$item.eq(i).css(&#123;<span class="attr">left</span>: i * opts.itemW + <span class="string">'px'</span>&#125;);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.$item.eq(i).css(&#123;<span class="attr">left</span>: <span class="number">-1</span> * opts.itemW + <span class="string">'px'</span>&#125;);</div><div class="line"></div><div class="line">      <span class="comment">// 初始化容器</span></div><div class="line">      <span class="keyword">this</span>.$wrap.css(&#123;<span class="attr">transition</span>: <span class="string">'transform '</span> + opts.duration + <span class="string">'s'</span>, <span class="attr">transform</span>: <span class="string">'translate3d(0,0,0)'</span>&#125;);</div><div class="line"></div><div class="line">      <span class="comment">// 初始化控制器</span></div><div class="line">      <span class="keyword">this</span>.$indicator.width(<span class="number">100</span> / opts.indicatorCount + <span class="string">'%'</span>);</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.opts = opts;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj, opts</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span>(!<span class="keyword">this</span>.initView(obj, opts)) &#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.touchEvent();</div><div class="line">      <span class="keyword">this</span>.play();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">refresh</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.opts.itemW = <span class="keyword">this</span>.$box.width();</div><div class="line">      <span class="keyword">this</span>.opts.isLock = <span class="literal">false</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">_throttle</span>: <span class="function"><span class="keyword">function</span>(<span class="params">fn, delay, duration, cxt</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line">      <span class="keyword">var</span> t_start;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">        <span class="keyword">var</span> t_curr = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"></div><div class="line">        clearTimeout(timer);</div><div class="line">        cxt.opts.isLock = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!t_start) &#123;</div><div class="line">          t_start = t_curr;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (t_curr - t_start &gt;= duration) &#123;</div><div class="line">          fn.apply(cxt, args);</div><div class="line">          t_start = t_curr;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            fn.apply(cxt, args);</div><div class="line">          &#125;, delay);</div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  $.fn.Carousel = <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">      !$(<span class="keyword">this</span>).data(<span class="string">'carousel'</span>) &amp;&amp; $(<span class="keyword">this</span>).data(<span class="string">'carousel'</span>, <span class="keyword">new</span> Carousel(<span class="keyword">this</span>, opts));</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;页面元素结构如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;banner&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;banner-inner&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;banner-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;switch banner-switch&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;switch-item cur&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;switch-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="浏览器" scheme="blog.calouni.win/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="兼容性" scheme="blog.calouni.win/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP  HTTP 协议   详解</title>
    <link href="blog.calouni.win/http/"/>
    <id>blog.calouni.win/http/</id>
    <published>2017-04-09T22:49:50.000Z</published>
    <updated>2017-05-20T02:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tcp-ip"><a href="#tcp-ip" class="headerlink" title="tcp/ip"></a>tcp/ip</h2><p>三次握手协议已经听的很烂了，但总觉得模模糊糊，是是而非。</p>
<p>握手三部曲：</p>
<ol>
<li>客户端(syn=j)   ——&gt;服务端     </li>
<li>服务端（syn=k,ack=j+1）——&gt; 客户端</li>
<li>客户端（ack=k+1）——&gt; 服务端<br>如果这三步都成功则tcp连接成功，就可以发数据包了。</li>
</ol>
<p>正因为tcp协议必须经过这样的三部曲，就会有漏洞，比如客户端伪造发送方的ip和端口，给目标服务器发送syn，因为ip和端口都是不存在的，所以服务器发送出去之后，就再也接收不到客户端的回应了。这样服务器会在那里等待以至于超时；一两个超时不会造成问题，但如果是 syn flood 的话，服务器就会有一堆半连接的tcp，就会造成堵塞。</p>
<p>网上有很多syn攻击的工具，hping<br>mac弄起来不是特别方便，先放着，有时间再下工具来测了。</p>
<a id="more"></a>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>HTTP协议是建立在TCP协议之上的一种应用，网站的请求数据都是用的http协议，作为前端程序员用的最多也是http协议。http是应用层的协议，tcp是传输层，它俩不是平行的关系，而是http基于tcp连接。 Tcp只负责连接，没有数据的部分，而http则在tcp连接建立好之后，进行带数据的请求。</p>
<p>现在广泛用的http1.1版本,1.1相对于1.0 升级的地方。</p>
<ol>
<li>1.0的连接是一次连接对应一次请求，服务端返回数据之后就会关闭连接；1.1一次连接对应多次请求，而且多次请求之间不会阻塞等待，可以并行发送请求和接收数据。  （为了解决一个网页文件中有很多的图片内容请求和操作请求，建立和关闭连接都需要代价）</li>
<li>请求头里面加了两个很有用的字段<br><code>Host: open.test.ximalaya.com
Proxy-Connection: keep-alive</code><br>Host 的存在可以写主机名，在服务器ip和端口相同的情况下，一个tcp连接就可以适用于一台服务器上面的不同域名站点的请求。 Proxy-Connection字段可以告诉服务器这次请求完之后，需要怎么处理tcp连接，如果是keep-alive，则不关闭连接。</li>
</ol>
<h3 id="http-1"><a href="#http-1" class="headerlink" title="http"></a>http</h3><h4 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h4><p>Http是“请求——回应”，这样的过程，一个请求对应一个响应，发请求之前会建立tcp连接，然后A客户端（浏览器）发请求给（服务器），B拿到内容（一个网页html文件，或者js文件，或者数据），发回给A。如果是html文件，浏览器会去解析显示；如果是js也会自动去运行；如果是数据，可以通过js代码控制，将数据显示给用户。</p>
<h4 id="http-几个部分"><a href="#http-几个部分" class="headerlink" title="http 几个部分"></a>http 几个部分</h4><ol>
<li>request  header 这是一个请求发出去的情况<br><code>GET /opage/category/manage HTTP/1.1
Host: open.test.ximalaya.com
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Referer: http://open.test.ximalaya.com/opage/index
Accept-Encoding: gzip, deflate, sdch
Accept-Language: zh-CN,zh;q=0.8,en;q=0.6
Cookie: device_id=1778036c-7133-c640-dd92-a618212f76fc;</code><br>这是我复制过来的请求头，request source ，一行一行看就知道所有请求的信息都在这里显示了。 实际项目中有次报错400 （bad request），这种情况最好的解决办法就是打开请求头看个究竟，原来发了一个post给服务器，但相应的url的接口只能接收get方法的请求，如果post方法发过去的请求是不被允许的，就报400错误了。 </li>
<li>response  header 服务器返回的情况<br><code>HTTP/1.1 200 OK
access-control-allow-origin: *
server: node-static/0.7.6
cache-control: max-age=3600
etag: &quot;1687406-180-1492078895000&quot;
date: Fri, 14 Apr 2017 08:04:33 GMT
last-modified: Thu, 13 Apr 2017 10:21:35 GMT
content-type: text/css
content-length: 180
connection: keep-alive</code><br>有关服务器的很多信息会放在这里，http协议版本，状态码，跨域，缓存（Http报头里面还有Last-Modified和ETags字段来定缓存机制，当然还有cache-control字段同时使用和控制。之后有空会写一篇专门的http的缓存机制。 <a href="http://blog.csdn.net/kikikind/article/details/6266101" target="_blank" rel="external">etag与http缓存</a> ）</li>
<li>Response 就是服务器返回的内容  返回的内容就交给浏览器去解析和处理了。</li>
<li>Timing<br>[image:6940E5B8-1711-4E9C-91C6-5BFFB278A0DA-674-000003B35B53FF72/下载.png]<br>Queueing 文件排序需要的时间<br>Stalled  是浏览器得到要发出这个请求的指令到请求可以发出的等待时间，一般是代理协商、以及等待可复用的TCP连接释放的时间，不包括DNS查询、建立TCP连接等时间等<br>Proxy Negotiation  处理代理的时间。  （这个字段其实也是有的，只是图上没表现出来）<br>DNS Lookup  页面上每一个新域都需要解析。 有两种情况，这个时间为空（1、有dns缓存 2、hosts文件里面有写域名和地址的对应关系）<br>Initial connection  建立TCP连接的时间，就相当于客户端从发请求开始到TCP握手结束这一段。<br>SSl （https 数据加密协议）这个字段有一些就没有，ssl这块比tcp协议复杂一些，因为涉及到传输数据的安全性  参考 <a href="http://www.wosign.com/faq/faq2016-0309-04.htm" target="_blank" rel="external">TLS/SSL 握手过程</a></li>
</ol>
<p>Request sent  请求发送所需要的时间，即请求内容从第一个字节开始计算到最后一个字节传完。 即请求数据的上传时间，这部分通常会很短。<br>Waiting  这部分就是请求发送出去后，到接收从服务器返回的第一个字节数据。<br>Content Download 客户端下载服务器返回的数据所用的时间（即从第一字节到下载完成）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;tcp-ip&quot;&gt;&lt;a href=&quot;#tcp-ip&quot; class=&quot;headerlink&quot; title=&quot;tcp/ip&quot;&gt;&lt;/a&gt;tcp/ip&lt;/h2&gt;&lt;p&gt;三次握手协议已经听的很烂了，但总觉得模模糊糊，是是而非。&lt;/p&gt;
&lt;p&gt;握手三部曲：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端(syn=j)   ——&amp;gt;服务端     &lt;/li&gt;
&lt;li&gt;服务端（syn=k,ack=j+1）——&amp;gt; 客户端&lt;/li&gt;
&lt;li&gt;客户端（ack=k+1）——&amp;gt; 服务端&lt;br&gt;如果这三步都成功则tcp连接成功，就可以发数据包了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正因为tcp协议必须经过这样的三部曲，就会有漏洞，比如客户端伪造发送方的ip和端口，给目标服务器发送syn，因为ip和端口都是不存在的，所以服务器发送出去之后，就再也接收不到客户端的回应了。这样服务器会在那里等待以至于超时；一两个超时不会造成问题，但如果是 syn flood 的话，服务器就会有一堆半连接的tcp，就会造成堵塞。&lt;/p&gt;
&lt;p&gt;网上有很多syn攻击的工具，hping&lt;br&gt;mac弄起来不是特别方便，先放着，有时间再下工具来测了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="TCP/IP" scheme="blog.calouni.win/tags/TCP-IP/"/>
    
      <category term="HTTP" scheme="blog.calouni.win/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>树-数据结构</title>
    <link href="blog.calouni.win/tree/"/>
    <id>blog.calouni.win/tree/</id>
    <published>2016-12-10T06:35:56.000Z</published>
    <updated>2017-05-20T02:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据结构的东西大学的时候上过课，可之后前端工作上一直就没怎么用到，都已经忘得差不多了。但平时也会碰到些结构上处理的问题，虽然可以用数组，对象，递归，循环之类可以解决，但思路和写法上感觉不是那么简洁，想着能否用到数据结构的东西。<br><a id="more"></a></p>
<h2 id="直接上问题-trie树"><a href="#直接上问题-trie树" class="headerlink" title="直接上问题   trie树"></a>直接上问题   trie树</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> data = [&#123;</div><div class="line">  <span class="string">"province"</span>: <span class="string">"浙江"</span>,</div><div class="line">  <span class="string">"city"</span>: <span class="string">"杭州"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"西湖"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="string">"province"</span>: <span class="string">"四川"</span>,</div><div class="line">  <span class="string">"city"</span>: <span class="string">"成都"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"锦里"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="string">"province"</span>: <span class="string">"四川"</span>,</div><div class="line">  <span class="string">"city"</span>: <span class="string">"成都"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"方所"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="string">"province"</span>: <span class="string">"四川"</span>,</div><div class="line">  <span class="string">"city"</span>: <span class="string">"阿坝"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"九寨沟"</span></div><div class="line">&#125;]</div><div class="line"></div><div class="line">改成</div><div class="line"></div><div class="line"><span class="keyword">var</span> data_ = [&#123;</div><div class="line">  <span class="string">"value"</span>: <span class="string">"浙江"</span>,</div><div class="line">  <span class="string">"children"</span>: [&#123;</div><div class="line">    <span class="string">"value"</span>: <span class="string">"杭州"</span>,</div><div class="line">    <span class="string">"children"</span>: [&#123;</div><div class="line">      <span class="string">"value"</span>: <span class="string">"西湖"</span></div><div class="line">    &#125;]</div><div class="line">  &#125;]</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="string">"value"</span>: <span class="string">"四川"</span>,</div><div class="line">  <span class="string">"children"</span>: [&#123;</div><div class="line">    <span class="string">"value"</span>: <span class="string">"成都"</span>,</div><div class="line">    <span class="string">"children"</span>: [&#123;</div><div class="line">      <span class="string">"value"</span>: <span class="string">"锦里"</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="string">"value"</span>: <span class="string">"方所"</span></div><div class="line">    &#125;]</div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="string">"value"</span>: <span class="string">"阿坝"</span>,</div><div class="line">    <span class="string">"children"</span>: [&#123;</div><div class="line">      <span class="string">"value"</span>: <span class="string">"九寨沟"</span></div><div class="line">    &#125;]</div><div class="line">  &#125;]</div><div class="line">&#125;]</div></pre></td></tr></table></figure>
<h3 id="通俗方法一"><a href="#通俗方法一" class="headerlink" title="通俗方法一"></a>通俗方法一</h3><p>不按树的思路，无非是遍历数组然后一层一层放入对象中，麻烦的地方是如果“四川”已经存在，就要从[{“value”:’浙江’},{“value”:’四川’}]数组中找出{“value”:’四川’}这组对象在原数组里面的位置，才可以进行下一步。解决方法是可以写个循环遍历函数去找哪个对象是。但这样的不好之处是，只要往下一层找，就要遍历一遍去找，思路简单，但这样写自己也不爽。</p>
<h3 id="trie树的思路"><a href="#trie树的思路" class="headerlink" title="trie树的思路"></a>trie树的思路</h3><p>仔细比较一下其实这种形状跟trie一样，所以关键只要在创建最终结果数组的时候，把每一层的value所在的位置依层次记下来就行。trie提供了很好的解题思路。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = [&#123;</div><div class="line">  <span class="string">"province"</span>: <span class="string">"浙江"</span>,</div><div class="line">  <span class="string">"city"</span>: <span class="string">"杭州"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"西湖"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="string">"province"</span>: <span class="string">"四川"</span>,</div><div class="line">  <span class="string">"city"</span>: <span class="string">"成都"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"锦里"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="string">"province"</span>: <span class="string">"四川"</span>,</div><div class="line">  <span class="string">"city"</span>: <span class="string">"成都"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"方所"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="string">"province"</span>: <span class="string">"四川"</span>,</div><div class="line">  <span class="string">"city"</span>: <span class="string">"阿坝"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"九寨沟"</span></div><div class="line">&#125;]</div><div class="line"></div><div class="line"><span class="keyword">var</span> keys = [<span class="string">"province"</span>, <span class="string">"city"</span>, <span class="string">"name"</span>];  <span class="comment">//如果&#123;"province": "四川","city": "阿坝",</span></div><div class="line"> <span class="string">"name"</span>: <span class="string">"九寨沟"</span>&#125;这里面的数据是有顺序的，keys也可以通过<span class="keyword">for</span> <span class="keyword">in</span> 循环，</div><div class="line">然后存在数组中，如果是乱的，只能写出来了。</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">data, keys</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">//放tree结构的对象</span></div><div class="line">	<span class="keyword">var</span> result = []; <span class="comment">//存结果的对象</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=data.length; i&lt;len; i++)&#123;</div><div class="line">		<span class="keyword">var</span> cur = obj; <span class="comment">//每组数据填充完毕就要重新赋下值</span></div><div class="line">           <span class="keyword">var</span> arr = result;</div><div class="line">		<span class="keyword">var</span> single = data[i];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>,lenj=keys.length; j&lt;lenj; j++)&#123;</div><div class="line">			<span class="keyword">var</span> key = keys[j];</div><div class="line">       		<span class="keyword">var</span> filed = single[key];</div><div class="line">	        <span class="keyword">if</span>(!cur[filed])&#123;</div><div class="line">	          <span class="keyword">var</span> temp = &#123;</div><div class="line">	           <span class="string">"value"</span>: single[key]</div><div class="line">	          &#125;;</div><div class="line">	          <span class="keyword">if</span>(j!=lenj<span class="number">-1</span>)&#123;</div><div class="line">	            temp.children = [];</div><div class="line">	          &#125;</div><div class="line">	          arr.push(temp);</div><div class="line">	          cur[filed] = &#123;<span class="attr">$$pos</span>:arr.length<span class="number">-1</span>&#125;; <span class="comment">//因为数组和对象是引用型数据，</span></div><div class="line">			  所有给cur填充就是给obj填充</div><div class="line">	          cur = cur[filed]; <span class="comment">//这里重新赋值为了深入一层填充赋值。</span></div><div class="line">	          arr = arr[cur[<span class="string">'$$pos'</span>]].children; <span class="comment">//找到当前层的对象所处的位置，</span></div><div class="line">			  重新赋值，为了下个循环进行填充</div><div class="line">	        &#125;<span class="keyword">else</span>&#123; <span class="comment">//已经填充过的情况，只需要找到当前层的位置，然后重新赋值，</span></div><div class="line">			进行下一个循环的填充</div><div class="line">	          cur=cur[filed];</div><div class="line">	          arr=arr[cur[<span class="string">'$$pos'</span>]].children;</div><div class="line">	        &#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  		<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="反转二叉树-Binary-Tree-用递归即可"><a href="#反转二叉树-Binary-Tree-用递归即可" class="headerlink" title="反转二叉树 Binary Tree   用递归即可"></a>反转二叉树 Binary Tree   用递归即可</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tree = &#123;</div><div class="line"> <span class="attr">value</span>: <span class="number">1</span>,</div><div class="line"> <span class="attr">left</span>: &#123;</div><div class="line">      <span class="attr">value</span>: <span class="number">2</span>,</div><div class="line">      <span class="attr">left</span>: &#123;</div><div class="line">           <span class="attr">value</span>: <span class="number">4</span></div><div class="line">      &#125;</div><div class="line"> &#125;,</div><div class="line"> <span class="attr">right</span>: &#123;</div><div class="line">       <span class="attr">value</span>: <span class="number">3</span>,</div><div class="line">       <span class="attr">left</span>: &#123;</div><div class="line">            <span class="attr">value</span>: <span class="number">5</span>,</div><div class="line">            <span class="attr">left</span>: &#123;</div><div class="line">                 <span class="attr">value</span>: <span class="number">7</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">right</span>: &#123;</div><div class="line">                 <span class="attr">value</span>: <span class="number">8</span></div><div class="line">            &#125;</div><div class="line">       &#125;,</div><div class="line">       <span class="attr">right</span>: &#123;</div><div class="line">             <span class="attr">value</span>: <span class="number">6</span></div><div class="line">       &#125;</div><div class="line">       &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">change后</div><div class="line"><span class="keyword">var</span> tree = &#123;</div><div class="line">     <span class="attr">value</span>:<span class="number">1</span>,</div><div class="line">     <span class="attr">left</span>:&#123;</div><div class="line">          <span class="attr">value</span>:<span class="number">3</span>,</div><div class="line">          <span class="attr">left</span>:&#123;</div><div class="line">              <span class="attr">value</span>:<span class="number">6</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">right</span>:&#123;</div><div class="line">               <span class="attr">value</span>:<span class="number">5</span>,</div><div class="line">               <span class="attr">left</span>:&#123;</div><div class="line">                    <span class="attr">value</span>:<span class="number">8</span></div><div class="line">               &#125;,</div><div class="line">               <span class="attr">right</span>:&#123;</div><div class="line">                    <span class="attr">value</span>:<span class="number">7</span></div><div class="line">               &#125;</div><div class="line">          &#125;</div><div class="line">     &#125;,</div><div class="line">     <span class="attr">right</span>:&#123;</div><div class="line">          <span class="attr">value</span>:<span class="number">2</span>,</div><div class="line">          <span class="attr">right</span>:&#123;</div><div class="line">               <span class="attr">value</span>:<span class="number">4</span></div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">想要反转二叉树的效果只需</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">tree,obj</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> tree)&#123;</div><div class="line">  <span class="keyword">if</span>(i==<span class="string">'left'</span>)&#123;</div><div class="line">     obj[<span class="string">'right'</span>] = &#123;&#125;;</div><div class="line">     change(tree[i],obj[<span class="string">'right'</span>]);</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="string">'value'</span>)&#123;</div><div class="line">     obj[i] = tree[i];</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="string">'right'</span>)&#123;</div><div class="line">     obj[<span class="string">'left'</span>] = &#123;&#125;;</div><div class="line">     change(tree[i],obj[<span class="string">'left'</span>]);</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line">change(tree, obj);</div></pre></td></tr></table></figure>
<h2 id="数据结构算法真的很重要，不管写什么，思路很重要，有关tree就先总结到这，有时间了再往下学习补充。"><a href="#数据结构算法真的很重要，不管写什么，思路很重要，有关tree就先总结到这，有时间了再往下学习补充。" class="headerlink" title="数据结构算法真的很重要，不管写什么，思路很重要，有关tree就先总结到这，有时间了再往下学习补充。"></a>数据结构算法真的很重要，不管写什么，思路很重要，有关tree就先总结到这，有时间了再往下学习补充。</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;数据结构的东西大学的时候上过课，可之后前端工作上一直就没怎么用到，都已经忘得差不多了。但平时也会碰到些结构上处理的问题，虽然可以用数组，对象，递归，循环之类可以解决，但思路和写法上感觉不是那么简洁，想着能否用到数据结构的东西。&lt;br&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="数据结构" scheme="blog.calouni.win/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>storage</title>
    <link href="blog.calouni.win/storage/"/>
    <id>blog.calouni.win/storage/</id>
    <published>2016-11-05T07:37:46.000Z</published>
    <updated>2017-05-20T02:38:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>存在服务端的会话存储，每个用户都有一个唯一的session_id，像验证码请求的时间（60秒之内）等信息可以存在session里面，如果前端也想从session里面取用户名等也可以存session里面。</p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><a id="more"></a>
<p>document.cookie<br>客户端的会话存储，但每次http请求头都会带cookie字段，服务器然后返回。大小在4k左右。这里可以存一些用户登录的信息，name和hash（hash=md5(name+password+’asda’)）,通过name去查出密码等，然后通过计算看hash是否正确。可以做保持登录，验证是否已登录。cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</p>
<h2 id="localStorage-sessionStorage"><a href="#localStorage-sessionStorage" class="headerlink" title="localStorage sessionStorage"></a>localStorage sessionStorage</h2><p>window.localStorage.setItem(‘key’,value)<br>客户端本地的存储，不像cookie一样会跟服务器传递，大小在5M左右。localStorage和sessionStorage区别，localStorage一直存在，所有同源页面共享。sessionStorage只在当前标签页，刷新和跳转不会消失，关闭页面即消失，不在不同的浏览器窗口中共享，即使是同一个页面</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;session&quot;&gt;&lt;a href=&quot;#session&quot; class=&quot;headerlink&quot; title=&quot;session&quot;&gt;&lt;/a&gt;session&lt;/h2&gt;&lt;p&gt;存在服务端的会话存储，每个用户都有一个唯一的session_id，像验证码请求的时间（60秒之内）等信息可以存在session里面，如果前端也想从session里面取用户名等也可以存session里面。&lt;/p&gt;
&lt;h2 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h2&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="cookie" scheme="blog.calouni.win/tags/cookie/"/>
    
      <category term="storage" scheme="blog.calouni.win/tags/storage/"/>
    
  </entry>
  
  <entry>
    <title>setTimeout</title>
    <link href="blog.calouni.win/setTimeout/"/>
    <id>blog.calouni.win/setTimeout/</id>
    <published>2016-11-04T05:41:50.000Z</published>
    <updated>2017-05-20T03:00:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>上午在SegmentFault上看到了这个问题《关于SetTimeout 时间设为0时》（注：SegmentFault正在调整备案，如不能访问，请点击这里），原提问者注明了问题来源：《JS setTimeout延迟时间为0的详解》。这个问题来源也是转载的，我后来找到了出处。<br>在问题来源的那篇的文章中（后者），讲述了JS是单线程引擎：它把任务放到队列中，不会同步去执行，必须在完成一个任务后才开始另外一个任务。<br>而后，转载的那篇文章列出并补充了原文的栗子：</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01//EN"</span> <span class="string">"http://www.w3.org/TR/html4/strict.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">   &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;</div><div class="line">   &lt;title&gt;setTimeout&lt;/title&gt;</div><div class="line">   &lt;script type="text/javascript"&gt;</div><div class="line">       function get(id) &#123;</div><div class="line">           return document.getElementById(id);</div><div class="line">       &#125;</div><div class="line">       window.onload = function () &#123;</div><div class="line">           //第一个例子：未使用setTimeout</div><div class="line">           get('makeinput').onmousedown = function () &#123;</div><div class="line">               var input = document.createElement('input');</div><div class="line">               input.setAttribute('type', 'text');</div><div class="line">               input.setAttribute('value', 'test1');</div><div class="line">               get('inpwrapper').appendChild(input);</div><div class="line">               input.focus();</div><div class="line">               input.select();</div><div class="line">           &#125;</div><div class="line">           //第二个例子：使用setTimeout</div><div class="line">           get('makeinput2').onmousedown = function () &#123;</div><div class="line">               var input = document.createElement('input');</div><div class="line">               input.setAttribute('type', 'text');</div><div class="line">               input.setAttribute('value', 'test1');</div><div class="line">               get('inpwrapper2').appendChild(input);</div><div class="line">               //setTimeout</div><div class="line">               setTimeout(function () &#123;</div><div class="line">                   input.focus();</div><div class="line">                   input.select();</div><div class="line">               &#125;, 0);</div><div class="line">           &#125;</div><div class="line">           //第三个例子，onkeypress输入的时候少了一个值</div><div class="line">           get('input').onkeypress = function () &#123;</div><div class="line">               get('preview').innerHTML = this.value;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">   &lt;h1&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/h1&gt;</div><div class="line">   &lt;h2&gt;1、未使用 &lt;code&gt;setTimeout&lt;/code&gt;&lt;/h2&gt;</div><div class="line">   &lt;button id="makeinput"&gt;生成 input&lt;/button&gt;</div><div class="line">   &lt;p id="inpwrapper"&gt;&lt;/p&gt;</div><div class="line"></div><div class="line"></div><div class="line">   &lt;h2&gt;2、使用 &lt;code&gt;setTimeout&lt;/code&gt;&lt;/h2&gt;</div><div class="line">   &lt;button id="makeinput2"&gt;生成 input&lt;/button&gt;</div><div class="line">   &lt;p id="inpwrapper2"&gt;&lt;/p&gt;</div><div class="line"></div><div class="line"></div><div class="line">   &lt;h2&gt;3、另一个例子&lt;/h2&gt;</div><div class="line">   &lt;p&gt;</div><div class="line">       &lt;input type="text" id="input" value="" /&gt;&lt;span id="preview"&gt;&lt;/span&gt;</div><div class="line">   &lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>代码运行实例请戳这里。<br>原文中有这么一段话，描述的有点抽象：</p>
<p>JavaScript引擎在执行onmousedown时，由于没有多线程的同步执行，不可能同时去处理刚创建元素的focus 和select方法，由于这两个方法都不在队列中，在完成onmousedown后，JavaScript 引擎已经丢弃了这两个任务，正如第一种情况。而在第二种情况中，由于setTimeout可以把任务从某个队列中跳脱成为新队列，因而能够得到期望的结果。</p>
<p>我看到这里就觉得非常不对劲了。因为按照这种任务会被丢弃的说法，那么只要在事件触发的函数中再触发其他的事件都会被丢弃，浏览器是绝对不会这么做的，于是我编写了测试代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//第一个例子：未使用setTimeout</span></div><div class="line">    get(<span class="string">'makeinput'</span>).onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</div><div class="line">        input.setAttribute(<span class="string">'type'</span>, <span class="string">'text'</span>);</div><div class="line">        input.setAttribute(<span class="string">'value'</span>, <span class="string">'test1'</span>);</div><div class="line">        get(<span class="string">'inpwrapper'</span>).appendChild(input);</div><div class="line">        <span class="comment">//按照文中的理论，这里的click不会被触发，但它却成功触发了</span></div><div class="line">        get(<span class="string">'inpwrapper'</span>).click();<span class="comment">//触发了inpwrapper的onclick事件</span></div><div class="line">    &#125;</div><div class="line">    get(<span class="string">'inpwrapper'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">'linkFly'</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面的onclick()最终是执行了：弹出了”linkFly”。</p>
<p>而在转载的文中为了引人深思，又提出了第三个例子：</p>
<p>在此，你可以看看例子 3，它的任务是实时更新输入的文本，现在请试试，你会发现预览区域总是落后一拍，比如你输 a, 预览区并没有出现 a, 在紧接输入b时，a才不慌不忙地出现。</p>
<p>而文中最后留给大家的思考的问题，解决方案就是使用setTimeout再次调整浏览器的代码任务运行队列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> domInput = get(<span class="string">'input'</span>);</div><div class="line">domInput.onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//第三个例子的问题就这样就会被解决</span></div><div class="line">        get(<span class="string">'preview'</span>).innerHTML = domInput.value;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原文和转载的文章中都对setTimeout(fn,0)进行了思考，但原文指出的问题本质漏洞百出，所以才出了这篇文章，我们的正文，现在开始。</p>
<p>单线程的JavaScript</p>
<p>首先我们来看浏览器下的JavaScript：<br>浏览器的内核是多线程的，它们在内核制控下相互配合以保持同步，一个浏览器至少实现三个常驻线程：javascript引擎线程，GUI渲染线程，浏览器事件触发线程。</p>
<p>javascript引擎是基于事件驱动单线程执行的，JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行JS程序。<br>GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。但需要注意 GUI渲染线程与JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。<br>事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeOut、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。（当线程中没有执行任何同步代码的前提下才会执行异步代码）<br>js的单线程在这一段面试代码中尤为明显（理解即可，请不要尝试…浏览器会假死的）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isEnd = <span class="literal">true</span>;</div><div class="line"><span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    isEnd = <span class="literal">false</span>;<span class="comment">//1s后，改变isEnd的值</span></div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line"><span class="comment">//这个while永远的占用了js线程，所以setTimeout里面的函数永远不会执行</span></div><div class="line"><span class="keyword">while</span> (isEnd);</div><div class="line"><span class="comment">//alert也永远不会弹出</span></div><div class="line">alert(<span class="string">'end'</span>);</div></pre></td></tr></table></figure></p>
<p>在我工作中对js的认识，个人认为js的任务单位是函数。即，一个函数表示着一个任务，这个函数没有执行结束，则在浏览器中当前的任务即没有结束。<br>上面的代码中，当前任务因为while的执行而造成永远无法执行，所以后面的setTimeout也永远不会被执行。它在浏览器的任务队列中如图所示：</p>
<p>Browser Event</p>
<p>setTimeout背后意味着什么</p>
<p>这篇文章一直在使用setTimeout为我们展现和理解js单线程的设计，只是它错误的使用了Event来进行演示，并过度解读了Event。<br>这里原文和转载的文章忽略了这些基础的事件触发，而且也偏偏挑了两套本身设计就比较复杂的API：onmouseXXX系和onkeyXXX系。</p>
<p>onKeyXXX系的API触发顺序如图：</p>
<p>onKeyXXX</p>
<p>而我个人所理解它们对应的功能：</p>
<p>onkeydown - 主要获取和处理当前按下按键，例如按下Enter后进行提交。在这一层，并没有更新相关DOM元素的值。<br>onkeypress - 主要获取和处理长按键，因为onkeypress在长按键盘的情况下会反复触发直到释放，这里并没有更新相关DOM元素的值，值得注意的是：keypress之后才会更新值，所以在长按键盘反复触发onkeypress事件的时候，后一个触发的onkeypress能得到上一个onkeypress的值。所以出现了onkeypress每次取值都会是上一次的值而不是最新值。<br>onkeyup - 触发onkeyup的DOM元素的值在这里已经更新，可以拿到最新的值，所以这里主要处理相关DOM元素的值。<br>流程就是上面的图画的那样：</p>
<p>onkeydown =&gt; onkeypress =&gt; onkeyup</p>
<p>使用了setTimeout之后，流程应该是下面这样子的：</p>
<p>onkeydown =&gt; onkeypress =&gt; function =&gt; onkeyup</p>
<p>使用setTimeout(fn,0)之后，在onkeypress后面插入了我们的函数function。上面所说，浏览器在onkeypress之后就会更新相关DOM元素的状态（input[type=text]的value），所以我们的function里面可以拿到最新的值。<br>所以我们在onkeypress里面挂起setTimeout能拿到正确的值，下面的代码可以测试使用setTimeout(fn,0)之后的流程：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> domInput = get(<span class="string">'input'</span>), view = get(<span class="string">'preview'</span>);</div><div class="line">    <span class="comment">//onkeypress兼容性和说明：http://www.w3school.com.cn/jsref/jsref_events.asp</span></div><div class="line">    domInput.onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//这个函数在keypress之后，keyup之前执行</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'linkFly'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">    domInput.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'up'</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>然后我们再来谈谈原代码中的示例1和示例2，示例1和示例2的区别在这里：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//示例1</span></div><div class="line">input.focus();</div><div class="line">input.select();</div><div class="line"></div><div class="line"><span class="comment">//示例2</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    input.focus();</div><div class="line">    input.select();</div><div class="line">&#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p>原文章中说示例1的focus()和select()在onmousedown事件中被丢弃，从而导致了没有选中，但原文的作者忽略了他注册的事件是：onmousedown。<br>我们暂且不讨论onmouseXXX系的其他API，我们仅关注和点击相关的，它们的执行顺序是：</p>
<p>mousedown - 鼠标按钮按下<br>mouseup - 鼠标按钮释放<br>click - 完成单击<br>我们在onmousedown里面新建了input，并且选中input的值（调用了input.focus(),input.select()）。<br>那么为什么没有被选中呢？这样，我们来做一次测试，看看我们的onfocus到底是被丢弃了，还是触发了。我们把原文的代码进行改写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> makeBtn = get(<span class="string">'makeinput'</span>);</div><div class="line">    <span class="comment">//观察onmouseXXX系完成整个单击的顺序</span></div><div class="line">    makeBtn.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e.type);</div><div class="line">        <span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</div><div class="line">        input.setAttribute(<span class="string">'type'</span>, <span class="string">'text'</span>);</div><div class="line">        input.setAttribute(<span class="string">'value'</span>, <span class="string">'test1'</span>);</div><div class="line">        get(<span class="string">'inpwrapper'</span>).appendChild(input);</div><div class="line">        input.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//观察我们新生成的input什么时候获取焦点的，或者它有没有像原文作者说的那样被丢弃了</span></div><div class="line">            <span class="built_in">console</span>.info(<span class="string">'input focus'</span>);</div><div class="line">        &#125;;</div><div class="line">        input.focus();</div><div class="line">        input.select();</div><div class="line">    &#125;</div><div class="line">    makeBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e.type);</div><div class="line">    &#125;;</div><div class="line">    makeBtn.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e.type);</div><div class="line">    &#125;;</div><div class="line">    makeBtn.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//观察我们生成按钮什么时候获取焦点的</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'makeBtn focus'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>代码运行的结果是这样的：<br>onmouseXXX &amp; focus</p>
<p>我们的input focus执行了——那么它为什么没有获取到焦点呢？我们再看看后面执行的函数：我们点击的按钮，在mousedown之后，才获得焦点，也就是说：我们的input本来已经得到了focus()，但在onmousedown之后，我们点击的按钮才迟迟触发了自己的onfocus()，导致我们的input被覆盖。<br>我们再加上setTimeout进行测试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> makeBtn = get(<span class="string">'makeinput'</span>);</div><div class="line">    makeBtn.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e.type);</div><div class="line">        <span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</div><div class="line">        input.setAttribute(<span class="string">'type'</span>, <span class="string">'text'</span>);</div><div class="line">        input.setAttribute(<span class="string">'value'</span>, <span class="string">'test1'</span>);</div><div class="line">        get(<span class="string">'inpwrapper'</span>).appendChild(input);</div><div class="line">        input.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.info(<span class="string">'input focus'</span>);</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">//我们加上setTimeout，看看会发生什么</span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            input.focus();</div><div class="line">            input.select();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    makeBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e.type);</div><div class="line">    &#125;;</div><div class="line">    makeBtn.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e.type);</div><div class="line">    &#125;;</div><div class="line">    makeBtn.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'makeBtn focus'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>执行结果是这样：<br>onmouseXXX and settimeout</p>
<p>可以看见当我们点击”生成”按钮的时候，按钮的focus正确的执行了，然后才执行了input focus。<br>在示例1中，我们在onmousedown()中执行了input.focus()导致input得到焦点，而onmousedown之后，我们点击的按钮才迟迟得到了自己的焦点，造成了我们input刚拿到手还没焐热的焦点被转移。<br>而示例2中的代码，我们延迟了焦点，当按钮获得焦点之后，我们的input再把焦点抢过来，所以，使用setTimeout(fn,0)之后，我们的input可以得到焦点并选中文本。<br>这里值得思考的focus()的执行时机，根据这次测试观察，发现focus事件好像挂载在mousedown之内的最后面，而不是直接挂在mousedown的后面。它和mousedown仿佛是一体的。<br>我们使用setTimeout之前的任务流程是这样的（-&gt;表示在上一个任务中，=&gt;表示在上一个任务后）：</p>
<p>onmousedown -&gt; onmousedown中执行了input.focus() -&gt; button.onfocus =&gt; onmouseup =&gt; onclick</p>
<p>onmouseXXX事件流程</p>
<p>而我们使用了setTimeout之后的任务流程是这样的：</p>
<p>onmousedown -&gt; button.onfocus =&gt; input.focus =&gt; onmouseup =&gt; onclick</p>
<p>onmouseXXX+setTimeout事件流程</p>
<p>而从上面的流程上我们得知了另外的消息，我们还可以把input.focus挂在mouseup和click下，因为在这些事件之前，我们的按钮已经得到过焦点了，不会再抢我们的焦点了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">makeBtn.click = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(e.type);</div><div class="line">    <span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</div><div class="line">    input.setAttribute(<span class="string">'type'</span>, <span class="string">'text'</span>);</div><div class="line">    input.setAttribute(<span class="string">'value'</span>, <span class="string">'test1'</span>);</div><div class="line">    get(<span class="string">'inpwrapper'</span>).appendChild(input);</div><div class="line">    input.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//观察我们新生成的input什么时候获取焦点的</span></div><div class="line">        <span class="built_in">console</span>.info(<span class="string">'input focus'</span>);</div><div class="line">    &#125;;</div><div class="line">    input.focus();</div><div class="line">    input.select();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>出处：www.cnblogs.com/silin6/<br>我们应该认识到，利用setTimeout(fn,0)的特性，可以帮助我们在某些极端场景下，修正浏览器的下一个任务。</p>
<p>到了这里，我们已经可以否定原文所说的：”JavaScript引擎已经丢弃了这两个任务”。<br>我仍然相信，浏览器是爱我们的（除了IE6和移动端一些XXOO的浏览器！！！！）浏览器并不会平白无故的丢弃我们辛劳写下的代码，多数时候，只是因为我们没有看见背后的真相而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上午在SegmentFault上看到了这个问题《关于SetTimeout 时间设为0时》（注：SegmentFault正在调整备案，如不能访问，请点击这里），原提问者注明了问题来源：《JS setTimeout延迟时间为0的详解》。这个问题来源也是转载的，我后来找到了出处。&lt;br&gt;在问题来源的那篇的文章中（后者），讲述了JS是单线程引擎：它把任务放到队列中，不会同步去执行，必须在完成一个任务后才开始另外一个任务。&lt;br&gt;而后，转载的那篇文章列出并补充了原文的栗子：&lt;/p&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="setTimeout" scheme="blog.calouni.win/tags/setTimeout/"/>
    
  </entry>
  
  <entry>
    <title>js事件 捕获,冒泡原理  绑定事件若干方法和区别</title>
    <link href="blog.calouni.win/event/"/>
    <id>blog.calouni.win/event/</id>
    <published>2016-10-20T06:35:56.000Z</published>
    <updated>2017-05-20T09:24:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事件是通过用户操作，运行js事件，达到预想的效果。明白事件的原理以及使用非常关键。所以花点时间整理出来。</p>
<h2 id="捕获和冒泡-事件的原理（捕获-gt-目标-gt-冒泡）"><a href="#捕获和冒泡-事件的原理（捕获-gt-目标-gt-冒泡）" class="headerlink" title="捕获和冒泡{事件的原理（捕获-&gt;目标-&gt;冒泡）}"></a>捕获和冒泡{事件的原理（捕获-&gt;目标-&gt;冒泡）}</h2><p>先是捕获，从window自上往下找目标，然后运行目标事件，如果没有Event.stopPropagation(),就会往上冒泡。</p>
<p>事件的过程提到捕获和冒泡，可能用是会用，但概念不是很清楚。</p>
<p><strong>捕获和冒泡：捕获是从上往下的，冒泡是从下往上的冒泡，如果addEventListener() 方法第三个参数设为true，即捕获，会往下派发到子树中的监听器，只要是捕获，冒泡事件经过时就略过了</strong></p>
<a id="more"></a>
<p>看这张图会比较好理解：</p>
<p><img src="/uploads/img/event.jpg" alt="Alt text"></p>
<p><strong>各自的应用场景：</strong></p>
<ol>
<li>捕获：当要实现在某个条件下，点任何按钮没反应时，可在document上绑定捕获事件，然后event.preventDefault()即可，事件就不会往下找目标，且不会冒泡了。 IE不支持</li>
<li>冒泡：可用于事件代理等，通过event.target可得到目标按钮。</li>
</ol>
<h2 id="原生绑定事件的几种方式"><a href="#原生绑定事件的几种方式" class="headerlink" title="原生绑定事件的几种方式"></a>原生绑定事件的几种方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>); &#125; </div><div class="line">element.addEventListener(<span class="string">'click'</span>, cb, <span class="literal">false</span>); </div><div class="line">element.attachEvent(<span class="string">'onclick'</span>, cb); <span class="comment">//历史版本都支持，从IE11开始不支持</span></div><div class="line">element.onclick = cb;  <span class="comment">//所有浏览器</span></div></pre></td></tr></table></figure>
<p>addEventListener</p>
<p> <strong>注意：</strong>Internet Explorer 8 及更早IE版本不支持 addEventListener() 方法，，Opera 7.0 及 Opera 更早版本也不支持。 但是，对于这些不支持该函数的浏览器，你可以使用 attachEvent() 方法来添加事件句柄</p>
<p>参数说明：</p>
<p>type：事件类型</p>
<p>listener：事件触发后的回调函数</p>
<p>useCapture：是否使用捕获，如果值为true， useCapture 表示用户希望发起捕获。 在发起捕获之后， 只要Dom子树下发生了该事件类型，都会先被该事件监听器捕获，然后再被派发到Dom子树中的事件监听器中。并且向上冒泡的事件不会触发那些发起捕获的事件监听器。进一步的解释可以查看 DOM Level 3 Events 文档。 useCapture 默认值为false 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span>  newNode=  <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);<span class="comment">//创建新节点</span></div><div class="line">newNode.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="addEventListener-attachEvent"><a href="#addEventListener-attachEvent" class="headerlink" title="addEventListener attachEvent"></a>addEventListener attachEvent</h3><p>addEventListener  和  attachEvent 之间的区别主要是浏览器兼容的区别</p>
<p>onclick和 另两者的区别主要是 onclick事件是覆盖的，后面覆盖前面，而addEventListener  和  attachEvent可以同个事件绑定在相同元素上，且都依次运行。</p>
<h3 id="bind-on-delegate-live"><a href="#bind-on-delegate-live" class="headerlink" title="bind on delegate live"></a>bind on delegate live</h3><h4 id="live-低版本的jquery用的live，后来改成on了"><a href="#live-低版本的jquery用的live，后来改成on了" class="headerlink" title="live 低版本的jquery用的live，后来改成on了"></a>live 低版本的jquery用的live，后来改成on了</h4><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div p"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text());</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//这类的绑定就是bind绑定</span></div><div class="line">$(<span class="string">"div p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text());</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="number">1.</span> bind是隐式迭代的绑定方法，当给多个元素进行绑定的时候就不适合，它是一个个元素进行绑定的</div><div class="line"><span class="number">2.</span> 对于当前不存在的元素，是无法绑定的</div></pre></td></tr></table></figure>
<h4 id="on"><a href="#on" class="headerlink" title="on"></a>on</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">是对bind delegate live 三种绑定方式的合并</div><div class="line"></div><div class="line">div.on(<span class="string">'click'</span>, <span class="string">'p'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line">这是事件委托的绑定方式，如果把选择器的p去掉，对div进行绑定，其实就是bind绑定方法</div></pre></td></tr></table></figure>
<h4 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).delegate(<span class="string">"p"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">"p"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="on和delegate的区别"><a href="#on和delegate的区别" class="headerlink" title="on和delegate的区别"></a>on和delegate的区别</h4><p>on事件委托的绑定方式和delegate除了参数位置不太一样，其它没什么区别</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;事件是通过用户操作，运行js事件，达到预想的效果。明白事件的原理以及使用非常关键。所以花点时间整理出来。&lt;/p&gt;
&lt;h2 id=&quot;捕获和冒泡-事件的原理（捕获-gt-目标-gt-冒泡）&quot;&gt;&lt;a href=&quot;#捕获和冒泡-事件的原理（捕获-gt-目标-gt-冒泡）&quot; class=&quot;headerlink&quot; title=&quot;捕获和冒泡{事件的原理（捕获-&amp;gt;目标-&amp;gt;冒泡）}&quot;&gt;&lt;/a&gt;捕获和冒泡{事件的原理（捕获-&amp;gt;目标-&amp;gt;冒泡）}&lt;/h2&gt;&lt;p&gt;先是捕获，从window自上往下找目标，然后运行目标事件，如果没有Event.stopPropagation(),就会往上冒泡。&lt;/p&gt;
&lt;p&gt;事件的过程提到捕获和冒泡，可能用是会用，但概念不是很清楚。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;捕获和冒泡：捕获是从上往下的，冒泡是从下往上的冒泡，如果addEventListener() 方法第三个参数设为true，即捕获，会往下派发到子树中的监听器，只要是捕获，冒泡事件经过时就略过了&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="js" scheme="blog.calouni.win/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>水平垂直居中</title>
    <link href="blog.calouni.win/center/"/>
    <id>blog.calouni.win/center/</id>
    <published>2016-10-12T13:19:02.000Z</published>
    <updated>2017-05-20T02:36:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一-table-cell"><a href="#方法一-table-cell" class="headerlink" title="方法一 table-cell"></a>方法一 table-cell</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.chldren</span>&#123;  </div><div class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;  </div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#888</span>;  </div><div class="line">    <span class="attribute">display</span>:inline-block;  </div><div class="line">&#125;  </div><div class="line"><span class="selector-class">.father</span>&#123;  </div><div class="line">    <span class="attribute">width</span>:<span class="number">800px</span>;  </div><div class="line">    <span class="attribute">height</span>:<span class="number">400px</span>;  </div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#888</span>;  </div><div class="line">    <span class="attribute">display</span>:table-cell;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="方法二-absolute-transform"><a href="#方法二-absolute-transform" class="headerlink" title="方法二 absolute transform"></a>方法二 absolute transform</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.children</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%);  </div><div class="line"> 	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法三-flex"><a href="#方法三-flex" class="headerlink" title="方法三 flex"></a>方法三 flex</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.father</span>&#123;</div><div class="line">	<span class="attribute">display</span>:flex;</div><div class="line">	<span class="attribute">align-items</span>:center;</div><div class="line">	<span class="attribute">justify-content</span>:center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方法一-table-cell&quot;&gt;&lt;a href=&quot;#方法一-table-cell&quot; class=&quot;headerlink&quot; title=&quot;方法一 table-cell&quot;&gt;&lt;/a&gt;方法一 table-cell&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.chldren&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;500px&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;number&quot;&gt;#888&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:inline-block;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.father&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;800px&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;400px&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;number&quot;&gt;#888&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:table-cell;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;:middle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="css" scheme="blog.calouni.win/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>a标签不生效</title>
    <link href="blog.calouni.win/label-a/"/>
    <id>blog.calouni.win/label-a/</id>
    <published>2016-09-30T05:28:46.000Z</published>
    <updated>2017-05-20T02:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="a标签的使用场景"><a href="#a标签的使用场景" class="headerlink" title="a标签的使用场景"></a>a标签的使用场景</h2><ol>
<li>普通的a链接跳转 <a href="http://baidu.com" target="_blank" rel="external"></a></li>
<li><p>整块区域内容的跳转，就把a标签放在最外面作为父级，肯定需要设计宽高。然而a标签是行内元素，设置宽高是无效的，有三种方法（1、绝对定位 2、设置浮动 3、display：inline-block或block）.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a id=<span class="string">'a'</span> href=<span class="string">"http://new.hrgogogo.com/userProtocal/"</span> style=<span class="string">"width:150px;height:14px;"</span>&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'input'</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"remember"</span> <span class="attr">style</span>=<span class="string">"float:left;width:14px;height:14px;margin-top:1px;"</span>/&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:left;font-weight:normal;"</span>&gt;</span>我同意遵守用户协议<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 这样就可以实现同样的相同样式，且点击a标签和其内部元素时进行调转，这里当input标签的type为checkbox时，点击input会处理选择框。</p>
<a id="more"></a>
<p> <strong>But</strong>有种情况</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a id=<span class="string">'a'</span> href=<span class="string">"http://new.hrgogogo.com/userProtocal/"</span> style=<span class="string">"width:150px;height:14px;"</span>&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'input'</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"remember"</span> <span class="attr">style</span>=<span class="string">"float:left;width:14px;height:14px;margin-top:1px;"</span>/&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">'label'</span> <span class="attr">style</span>=<span class="string">"float:left;font-weight:normal;"</span> <span class="attr">for</span>=<span class="string">"remember"</span>&gt;</span>我同意遵守用户协议<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 这个时候点击label标签时，因为指向了input的checkout框，所以这个时候点击a标签的子元素input和label是不会触发a标签的跳转的。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;a标签的使用场景&quot;&gt;&lt;a href=&quot;#a标签的使用场景&quot; class=&quot;headerlink&quot; title=&quot;a标签的使用场景&quot;&gt;&lt;/a&gt;a标签的使用场景&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;普通的a链接跳转 &lt;a href=&quot;http://baidu.com&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;整块区域内容的跳转，就把a标签放在最外面作为父级，肯定需要设计宽高。然而a标签是行内元素，设置宽高是无效的，有三种方法（1、绝对定位 2、设置浮动 3、display：inline-block或block）.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;a id=&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; href=&lt;span class=&quot;string&quot;&gt;&quot;http://new.hrgogogo.com/userProtocal/&quot;&lt;/span&gt; style=&lt;span class=&quot;string&quot;&gt;&quot;width:150px;height:14px;&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;remember&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;float:left;width:14px;height:14px;margin-top:1px;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;float:left;font-weight:normal;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;我同意遵守用户协议&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 这样就可以实现同样的相同样式，且点击a标签和其内部元素时进行调转，这里当input标签的type为checkbox时，点击input会处理选择框。&lt;/p&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="标签" scheme="blog.calouni.win/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>marginTop不生效的解决</title>
    <link href="blog.calouni.win/marginTop/"/>
    <id>blog.calouni.win/marginTop/</id>
    <published>2016-09-23T05:47:40.000Z</published>
    <updated>2017-05-20T02:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有以下两种情况"><a href="#有以下两种情况" class="headerlink" title="有以下两种情况"></a>有以下两种情况</h2><h3 id="外边距合并margin-top失效"><a href="#外边距合并margin-top失效" class="headerlink" title="外边距合并margin-top失效"></a>外边距合并margin-top失效</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	    <span class="selector-class">.one</span>&#123;</div><div class="line">			<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">			<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">			<span class="attribute">border</span>:<span class="number">1px</span> solid blue;</div><div class="line">			<span class="attribute">margin-bottom</span>:<span class="number">100px</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="selector-class">.two</span>&#123;</div><div class="line">			<span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line">			<span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">			<span class="attribute">border</span>:<span class="number">1px</span> solid green;</div><div class="line">			<span class="attribute">margin-top</span>:<span class="number">20px</span>;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样的结果是两个div上下的距离是100px，而不是(100+20)px，因为one的margin-bottom的值比two的margin-top大，所以此处的margin-top是无效的。</p>
<a id="more"></a>
<h3 id="子元素设margin-top无效果"><a href="#子元素设margin-top无效果" class="headerlink" title="子元素设margin-top无效果"></a>子元素设margin-top无效果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt; </div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"> </span></div><div class="line">    <span class="selector-class">.father</span>&#123;</div><div class="line">      <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">300px</span>; </div><div class="line">	  <span class="attribute">background-color</span>:yellow;<span class="attribute">margin-top</span>:<span class="number">20px</span>; </div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.children</span>&#123;</div><div class="line">      <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">background-color</span>:green;</div><div class="line">	  <span class="attribute">border</span>:<span class="number">1px</span> solid green;<span class="attribute">margin-top</span>:<span class="number">10px</span>; </div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"children"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种情况明明子节点设置了margin-top，但却没生效。办法是有，只要父元素上（1、overflow：hidden 2、加padding 3、加border），好像只要给父元素明确下边界就可以生效了，这三种方法都可以做到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有以下两种情况&quot;&gt;&lt;a href=&quot;#有以下两种情况&quot; class=&quot;headerlink&quot; title=&quot;有以下两种情况&quot;&gt;&lt;/a&gt;有以下两种情况&lt;/h2&gt;&lt;h3 id=&quot;外边距合并margin-top失效&quot;&gt;&lt;a href=&quot;#外边距合并margin-top失效&quot; class=&quot;headerlink&quot; title=&quot;外边距合并margin-top失效&quot;&gt;&lt;/a&gt;外边距合并margin-top失效&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &lt;span class=&quot;selector-class&quot;&gt;.one&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid blue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;selector-class&quot;&gt;.two&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid green;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的结果是两个div上下的距离是100px，而不是(100+20)px，因为one的margin-bottom的值比two的margin-top大，所以此处的margin-top是无效的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="css" scheme="blog.calouni.win/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="blog.calouni.win/first/"/>
    <id>blog.calouni.win/first/</id>
    <published>2016-09-10T08:18:39.000Z</published>
    <updated>2017-05-20T02:53:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通对象，函数对象"><a href="#普通对象，函数对象" class="headerlink" title="普通对象，函数对象"></a>普通对象，函数对象</h2><p>函数对象有三种形式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> a=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;  </div><div class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'aa'</span>,<span class="built_in">console</span>.log(<span class="string">'aa'</span>));</div></pre></td></tr></table></figure>
<h2 id="函数对象都有个prototype-且为普通对象（特例：Function-prototype是函数对象）；"><a href="#函数对象都有个prototype-且为普通对象（特例：Function-prototype是函数对象）；" class="headerlink" title="函数对象都有个prototype,且为普通对象（特例：Function.prototype是函数对象）；"></a>函数对象都有个prototype,且为普通对象（特例：Function.prototype是函数对象）；</h2><a id="more"></a>
<h2 id="原型对象的作用是用来继承的以及原型链的概念"><a href="#原型对象的作用是用来继承的以及原型链的概念" class="headerlink" title="原型对象的作用是用来继承的以及原型链的概念"></a>原型对象的作用是用来继承的以及原型链的概念</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">     <span class="keyword">this</span>.name = name ? name : <span class="string">'haha'</span>;</div><div class="line">&#125;</div><div class="line">a.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a.name) <span class="comment">//'haha'</span></div><div class="line"><span class="built_in">console</span>.log(a.getName()) <span class="comment">//getName is not a function 因为没有实例</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> a(<span class="string">'方先生'</span>);</div><div class="line">b.getName();<span class="comment">//'方先生'</span></div><div class="line"></div><div class="line">如果：</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> a(<span class="string">'方先生'</span>);</div><div class="line">b.getName();<span class="comment">//undefined  通过new新建的对象只继承方法，而不会继承父类的属性</span></div><div class="line"></div><div class="line">原型链是达到继承效果的源性对象链</div><div class="line"></div><div class="line">b.__proto__ == a.prototype</div><div class="line">a.prototype.__proto__ == <span class="built_in">Object</span>.prototype</div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ == <span class="literal">null</span>;</div><div class="line">一直往上直到__proto__ == <span class="literal">null</span>;</div><div class="line">b-&gt;a.prototype-&gt;<span class="built_in">Object</span>.prototype-&gt;<span class="literal">null</span>;</div></pre></td></tr></table></figure>
<p><img src="/uploads/img/first.jpg" alt="Alt text"></p>
<p>有两点需要注意：</p>
<ol>
<li>注意Object.constructor===Function；//true 本身Object就是Function函数构造出来的</li>
<li>如何查找一个对象的constructor，就是在该对象的原型链上寻找碰到的第一个constructor属性所指向的对象</li>
</ol>
<h2 id="原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象。这是一种循环引用"><a href="#原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象。这是一种循环引用" class="headerlink" title="原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象。这是一种循环引用"></a>原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象。这是一种循环引用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.constructor === <span class="built_in">Function</span> <span class="comment">//true</span></div><div class="line"><span class="built_in">Object</span>.prototype.constructor === <span class="built_in">Object</span> <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>原型和原型链是JS实现继承的一种模型。</li>
<li>原型链的形成是真正是靠<strong>proto</strong> 而非prototype</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> dog = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">animal.price = <span class="number">2000</span>;<span class="comment">//</span></div><div class="line">dog.prototype = animal;</div><div class="line"><span class="keyword">var</span> tidy = <span class="keyword">new</span> dog();</div><div class="line"></div><div class="line">原型链分析</div><div class="line">tidy.__proto__ == dog.prototype;(这个等式成立的条件是通过<span class="keyword">new</span>继承)</div><div class="line">dog.prototype == animal;</div><div class="line"></div><div class="line">所以tidy.__proto__ == animal</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(tidy.price) <span class="comment">//2000</span></div><div class="line"><span class="built_in">console</span>.log(dog.price) <span class="comment">//unidefined</span></div><div class="line">如果：</div><div class="line">dog.__proto__ = animal;  -&gt;&gt; <span class="built_in">console</span>.log(dog.price) <span class="comment">//2000</span></div><div class="line">如果：</div><div class="line">dog.__proto__ = animal.prototype -&gt;&gt; <span class="built_in">console</span>.log(dog.price) </div><div class="line"><span class="comment">//undifined 因为dog找到的地址只有animal.prototype，并不是animal</span></div></pre></td></tr></table></figure>
<p>//通过原型链来继承的实例写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">a.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'qwe'</span>)&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">b.prototype.__proto__ = a.prototype;</div><div class="line"></div><div class="line">b.prototype.do = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'do'</span>)&#125;</div><div class="line"></div><div class="line">c = <span class="keyword">new</span> b();</div><div class="line">c.do() <span class="comment">//do</span></div><div class="line"></div><div class="line"><span class="comment">//父类如果有方法，还是需要call方法去</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.Say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' can say!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Student = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;Person.call(<span class="keyword">this</span>,name)&#125;; <span class="comment">//顺序不能反，要在最前面</span></div><div class="line">Student.prototype.__proto__=Person.prototype; </div><div class="line">Student.prototype.DoHomeWork = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' can do homework!'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ming = <span class="keyword">new</span> Student(<span class="string">"xiaoming"</span>);</div><div class="line">ming.DoHomeWork(); <span class="comment">//'xiaoming can do homework!'</span></div><div class="line">ming.Say();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;普通对象，函数对象&quot;&gt;&lt;a href=&quot;#普通对象，函数对象&quot; class=&quot;headerlink&quot; title=&quot;普通对象，函数对象&quot;&gt;&lt;/a&gt;普通对象，函数对象&lt;/h2&gt;&lt;p&gt;函数对象有三种形式&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;aa&#39;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;aa&#39;&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;函数对象都有个prototype-且为普通对象（特例：Function-prototype是函数对象）；&quot;&gt;&lt;a href=&quot;#函数对象都有个prototype-且为普通对象（特例：Function-prototype是函数对象）；&quot; class=&quot;headerlink&quot; title=&quot;函数对象都有个prototype,且为普通对象（特例：Function.prototype是函数对象）；&quot;&gt;&lt;/a&gt;函数对象都有个prototype,且为普通对象（特例：Function.prototype是函数对象）；&lt;/h2&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="继承" scheme="blog.calouni.win/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>this指向</title>
    <link href="blog.calouni.win/this/"/>
    <id>blog.calouni.win/this/</id>
    <published>2016-09-02T08:56:02.000Z</published>
    <updated>2017-05-20T02:58:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>this看上去又很简单，但又让人觉得烦躁，因为这个东西确实挺麻烦的，不去屡一下，理解一下，只能当不知道的时候在console里面验证this到底是指向什么，却不知所以然，这样几次之后，就决定弄清楚它，写出来分享，不对的地方也可以指正。</p>
<a id="more"></a>    
<h2 id="有那么几种this的情况"><a href="#有那么几种this的情况" class="headerlink" title="有那么几种this的情况"></a>有那么几种this的情况</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、	<span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line"></div><div class="line"><span class="number">2</span>、(<span class="number">1</span>)<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">  	&#125;</div><div class="line">	test();</div><div class="line">	或  </div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;)()<span class="comment">//这样也可以自动运行，会另外一篇文章写自运行和闭包</span></div><div class="line"></div><div class="line">	(<span class="number">2</span>)<span class="keyword">var</span> test = [<span class="built_in">console</span>.log(<span class="keyword">this</span>)];</div><div class="line"></div><div class="line">	(<span class="number">3</span>)<span class="keyword">var</span> test = &#123;</div><div class="line">		<span class="attr">a</span>:<span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	(<span class="number">4</span>)<span class="keyword">var</span> test = &#123;</div><div class="line">		<span class="attr">a</span>:&#123;<span class="attr">b</span>:<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	(<span class="number">5</span>)<span class="keyword">var</span> test = &#123;</div><div class="line">		<span class="attr">a</span>:&#123;<span class="attr">b</span>:[<span class="built_in">console</span>.log(<span class="keyword">this</span>)]&#125;</div><div class="line">	&#125;	</div><div class="line"></div><div class="line"><span class="number">3</span>、(<span class="number">1</span>)<span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> other = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> other;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> test1 = test();</div><div class="line">	test1();</div><div class="line"></div><div class="line"></div><div class="line">	(<span class="number">2</span>)<span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		a()</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			b();</div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	test();</div><div class="line"></div><div class="line"><span class="number">4</span>、<span class="keyword">var</span> test = &#123;</div><div class="line">		<span class="attr">a</span>:<span class="number">1</span>,</div><div class="line">		<span class="attr">b</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">   &#125;</div><div class="line">	test.b();</div><div class="line"><span class="number">5</span>、<span class="keyword">var</span> ele = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">    ele.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="number">6</span>、<span class="keyword">var</span> test = &#123;</div><div class="line">		<span class="attr">a</span>:<span class="number">1</span>,</div><div class="line">		<span class="attr">b</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">var</span> another = test.b;</div><div class="line">   another();<span class="comment">//猜这里console出来的是什么</span></div></pre></td></tr></table></figure>
<p>是不是看的眼花缭乱了，根本分不清this指向的是什么。</p>
<p>说下this指向的“定义”，就像学数学知识一样把东西说明白了，解题的时候才能顺藤摸瓜。<br><strong>this指向的等于  执行调用函数的上一级对象</strong>执行两字要注意重视。</p>
<ol>
<li><strong>window</strong>  this指向的是全局window</li>
<li>(1)<strong>window</strong>  function函数其实还是绑在window对象上面，所以调用this的是window。(2)<strong>window</strong> 直接自运行，调用它的是window</li>
<li>(1)<strong>window</strong>  通过重新赋值，this被调用的还是window  (2)<strong>window</strong>  调用this的test还是绑window上的，所以结果还是window  (3)<strong>window</strong>  这里可能会困惑，以为结果是test对象，但这里不是通过test.a去调用this的，直接调用运行的。 (4)(5) <strong>window</strong> 因为它是直接调用运行，不管嵌套多少多少层，所以指向都是window</li>
<li><strong>test对象</strong>  test.b = function(){console.log(this)}; test.b()调用function的就是test对象</li>
<li><strong>ele对象</strong>  调用this的是onclick函数，上一级就是ele对象了</li>
<li><strong>test对象</strong>  调用this的是test.b(),上一级就是test对象</li>
</ol>
<h2 id="如果this还有其它情况没考虑到的，个人理解有误的可以留言，互相学习。"><a href="#如果this还有其它情况没考虑到的，个人理解有误的可以留言，互相学习。" class="headerlink" title="如果this还有其它情况没考虑到的，个人理解有误的可以留言，互相学习。"></a>如果this还有其它情况没考虑到的，个人理解有误的可以留言，互相学习。</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;this看上去又很简单，但又让人觉得烦躁，因为这个东西确实挺麻烦的，不去屡一下，理解一下，只能当不知道的时候在console里面验证this到底是指向什么，却不知所以然，这样几次之后，就决定弄清楚它，写出来分享，不对的地方也可以指正。&lt;/p&gt;
    
    </summary>
    
      <category term="技术篇" scheme="blog.calouni.win/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="js" scheme="blog.calouni.win/tags/js/"/>
    
      <category term="dom" scheme="blog.calouni.win/tags/dom/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="blog.calouni.win/hello/"/>
    <id>blog.calouni.win/hello/</id>
    <published>2016-08-14T08:18:39.000Z</published>
    <updated>2017-05-20T02:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>懒惰人哪，你去察看蚂蚁的动作就可得智慧。 –箴言 6:6</p>
</blockquote>
<p>拖了很久，觉得是该弄个博客了。</p>
<p>没有开始就没有过程，更没有结果，万事开头难。</p>
<p>无论是技术文章还是生活随想，都想记在这边，激励自己，也享受这个过程。</p>
<p>我有个昵称 “嗨，boy” ，很喜欢。 嗨，好似一种友好，又好似一种唤醒，自己无时无刻不像一个未长大的小男孩，需要成长，需要勇敢往前走，也但愿内心能保持最初那颗勇敢的心，keep going ！</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;懒惰人哪，你去察看蚂蚁的动作就可得智慧。 –箴言 6:6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;拖了很久，觉得是该弄个博客了。&lt;/p&gt;
&lt;p&gt;没有开始就没有过程，更没有结果，万事开头难。&lt;/p&gt;
&lt;p&gt;无论是技术文章还是生活随想，都想记在这边，激励自己，也享受这个过程。&lt;/p&gt;
&lt;p&gt;我有个昵称 “嗨，boy” ，很喜欢。 嗨，好似一种友好，又好似一种唤醒，自己无时无刻不像一个未长大的小男孩，需要成长，需要勇敢往前走，也但愿内心能保持最初那颗勇敢的心，keep going ！&lt;/p&gt;
    
    </summary>
    
      <category term="随想" scheme="blog.calouni.win/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
</feed>
